#!/bin/bash

# bootstrap.bash
#
# This script sets up the build directory and the ninja files to build the
# project. It must be run from the build directory:
#
#     $ mkdir out && cd out
#     $ ../bootstrap.bash
#
# Then, from the root directory, use out/simplebp to execute a build.

set -e

# ORIG_SRCDIR = the root source directory for the project, where this script
# must be placed.
ORIG_SRCDIR=$(dirname "${BASH_SOURCE[0]}")

# The build process will re-run this script from the root source directory, so
# we can tell whether we're bootstrapping or not based on whether we're in the
# root source dir or the build dir.
if [[ "${ORIG_SRCDIR}" != "." ]]; then
    # Okay, we're bootstrapping. We're in the build dir.
    # Exercise: make sure this is not a project source directory.

    # If the script was invoked with an absolute path, use an absolute path
    # forthe build dir. Otherwise, define the build dir relative to the root
    # source dir.
    if [[ ${ORIG_SRCDIR:0:1} == '/' ]]; then
        export BUILDDIR=$PWD
    else
        export BUILDDIR=$(python -c "import os; print os.path.relpath('.', '${ORIG_SRCDIR}')")
    fi
    # Since we're bootstrapping, switch back to the root source dir for the rest
    # of the bootstrap.
    cd ${ORIG_SRCDIR}
fi

# When run during a build, this script is invoked with BUILDDIR already set.
# Otherwise, it should be set above, assuming we weren't in the root source dir.
# So no BUILDDIR == an attempt to bootstrap from the root source dir.
if [[ -z "${BUILDDIR}" ]]; then
    echo "error: Run ${BASH_SOURCE[0]} from the build output directory."
    exit 1
fi

# These variables are used by the Blueprint bootstrapping process. See
# build/blueprint/bootstrap.bash for more information.
# Since we moved back to ORIG_SRCDIR, this is SRCDIR.
export SRCDIR="."
# This script is the BOOTSTRAP script, used by the Blueprint build system.
export BOOTSTRAP="${SRCDIR}/bootstrap.bash"
# The bootstrap manifest for the simplebp builder, generated by bootstrapping
# the Blueprint project while pointing the the $SRCDIR/Blueprints file.
# Generally you won't need to change this, unless you're modifying simplebp
# itself.
export BOOTSTRAP_MANIFEST="${SRCDIR}/build/simplebp/build.ninja.in"

# Create the build dir, and save the path from it back to the root source dir.
mkdir -p ${BUILDDIR}
if [[ ${BUILDDIR:0:1} == '/' ]]; then
    export SRCDIR_FROM_BUILDDIR=$PWD
else
    export SRCDIR_FROM_BUILDDIR=$(python -c "import os; print os.path.relpath('.', '${BUILDDIR}')")
fi

# We save some variables that will be useful in the regular build process into
# the build dir. This generated file will be sourced during builds.
cat > $BUILDDIR/.simplebp.bootstrap <<EOF
BUILDDIR=${BUILDDIR}
SRCDIR_FROM_BUILDDIR=${SRCDIR_FROM_BUILDDIR}
EOF
# We use a convenience script called simplebp.bash to run builds, checking all
# the bootstrap steps to re-generate anything that changes.
ln -sf "${SRCDIR_FROM_BUILDDIR}/build/simplebp/simplebp.bash" $BUILDDIR/simplebp

# Finally, we run the Blueprint bootstrap process to generate our build.ninja
# file.
"${SRCDIR}/build/blueprint/bootstrap.bash" "$@"
